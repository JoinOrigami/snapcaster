services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data

  traefik:
    image: traefik:v2.9
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entryPoints.web.transport.lifeCycle.graceTimeOut=0"
    ports:
      - "3000:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  server:
    <<: &service
      image: node:18
      working_dir: /src
      volumes:
        - .:/src
        - node-modules:/src/node_modules
        - yarn-cache:/src/.yarn-cache
      environment:
        - YARN_CACHE_FOLDER=/src/.yarn-cache
      env_file: .env
    command: ["yarn", "workspace", "@snapcaster/server", "dev"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.entrypoints=web"
      - "traefik.http.routers.server.rule=PathPrefix(`/api`)"
      - "traefik.http.services.server.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.routers.server.middlewares=strip-api"

  client:
    command: ["yarn", "workspace", "@snapcaster/client", "dev"]
    <<: *service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.routers.client.rule=!PathPrefix(`/api`)"
      - "traefik.http.services.client.loadbalancer.server.port=3000"

volumes:
  node-modules:
  yarn-cache:
  postgres-data:
